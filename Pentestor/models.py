from django.db import models
from django.urls import reverse, reverse_lazy
from django.core.files.storage import FileSystemStorage
from django.utils.deconstruct import deconstructible
from django.core.files import File
from ipaddress import ip_address
import datetime
import subprocess
import time
import datetime
from multiprocessing import Process
from Pentest11.settings import BASE_DIR
import shlex
import os
from django.conf import settings

SCANS_DIR = 'Scans'


@deconstructible
class MyFileSystemStorage(FileSystemStorage):
    def __init__(self, subdir):
        self.subdir = subdir
        super(MyFileSystemStorage, self).__init__(location=subdir)


storage = MyFileSystemStorage(SCANS_DIR)


class Target(models.Model):
    name = models.CharField(max_length=64, verbose_name='Name', db_index=True, null=True)
    ip = models.GenericIPAddressField(verbose_name="IP", db_index=True)
    notes = models.CharField(max_length=256, verbose_name="Notes", blank=True)
    added_at = models.DateTimeField(auto_now_add=True, verbose_name="Added date")
    report_ready_at = models.DateTimeField(auto_now=True, verbose_name="Ready date")
    number_of_scans = models.IntegerField(default=0)

    def get_absolute_url(self):
        return reverse('view_target', kwargs={"target_id": self.pk})

    def __str__(self):
        if self.name:
            return f"{self.name}-{self.ip}"
        return f"{self.ip}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        tr = Report(target=self)
        tr.save()

    def save_for_report(self, *args, **kwargs):
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "Target"
        verbose_name_plural = "Targets"
        ordering = ['-report_ready_at']


class Report(models.Model):
    target = models.ForeignKey("Target", on_delete=models.CASCADE, db_index=True, verbose_name="Target")
    name = models.CharField(max_length=100, verbose_name="Name", null=True)
    started_at = models.DateTimeField(auto_now_add=True, verbose_name="Addition time")
    finish_date = models.DateTimeField(auto_now=True, verbose_name="Finish time", null=True)
    notes = models.CharField(max_length=256, verbose_name="Notes", blank=True)
    status = models.BooleanField(default=False, verbose_name="Is ready")
    data = models.FileField(storage=storage, verbose_name="Data", null=True)

    def __str__(self):
        if self.name:
            return f"{self.name}_{self.target}_Scan#{self.target.number_of_scans}"
        return f"{self.target}_Scan#{self.target.number_of_scans}"

    def start_scan(self):
        self.scan_process = Process(target=self.parallel_scan)
        self.scan_process.run()

    def parallel_scan(self):
        time_started = datetime.datetime.now()
        started_time = f"{time_started.year}-{time_started.month}-{time_started.day}-{time_started.hour}-{time_started.minute}-{time_started.second}"
        file_name = f"{self}_{started_time}.txt"
        file_name_path = BASE_DIR / file_name
        command = f"nmap -oN \"{file_name_path}\" -T4 -A -v {self.target.ip}"
        print(command)
        stdout_file = (BASE_DIR / "stdout_stream_file.txt").resolve()
        with open(stdout_file, "w") as f:
            # scan_process = subprocess.run(shlex.split(command), stdout=f, stderr=f)
            scan_process = subprocess.run(shlex.split(command))
        with open(file_name, 'r') as file_itself:
            self.data = File(file_itself, file_name)
            print("scan finished")
            print("is finished set to true")
            self.status = True
            print("set finished datetime")
            super().save(update_fields=['status', 'data'])
        print("Data saved")

    def save(self, *args, **kwargs):
        self.target.number_of_scans += 1
        self.target.save_for_report(update_fields=['number_of_scans'])
        time_started = datetime.datetime.now()
        date_str = f"{time_started.year}-{time_started.month}-{time_started.day}-{time_started.hour}-{time_started.minute}-{time_started.second}"
        filename = f"{self}_{date_str}.txt"
        super().save(*args, **kwargs)
        print("scan supposed to start now")
        self.start_scan()

    class Meta:
        verbose_name = "Report"
        verbose_name_plural = "Reports"
        ordering = ['-finish_date']
