from django import template
from Pentestor.models import Report
from Pentest11 import settings
from pathlib import Path
from django.utils.safestring import mark_safe, SafeString

register = template.Library()

@register.simple_tag()
def get_content_of_file(report: Report) -> SafeString:
    with open(file=Path(str(report.data.file)), mode="r") as f:
        lines = f.readlines()

    result = ""
    for n, line in enumerate(lines):
        if len(line) != 1 and n != 0 and n != len(lines)-2 and n != len(lines)-3:
            if "open" in line:
                result += f"<p style=\"color: green;\">{line[0:-1].replace('<', '&lt;').replace('>', '&gt;').replace('  ', '&nbsp&nbsp')}</p>"
            elif "closed" in line:
                result += f"<p style=\"color: red;\">{line[0:-1].replace('<', '&lt;').replace('>', '&gt;').replace('  ', '&nbsp&nbsp')}</p>"
            elif "filtered" in line:
                result += f"<p style=\"color: #dea300;\">{line[0:-1].replace('<', '&lt;').replace('>', '&gt;').replace('  ', '&nbsp&nbsp')}</p>"
            else:
                result += f"<p>{line[0:-1].replace('<', '&lt;').replace('>', '&gt;').replace('  ', '&nbsp')}</p>"

    # result = ''.join([f"<p>{line[0:-1]}</p>" for line in lines if not (len(line) == 1)])

    return mark_safe(result)
